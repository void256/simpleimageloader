package de.lessvoid.simpleimageloader;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

public class SimpleImageLoaderTest {
  private SimpleImageLoader loader;

  // the 24 bit image data
  private byte[] expectedImageData24 = new byte[] {
      (byte)0xF1, (byte)0xFB, (byte)0x3D, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0x06, (byte)0x02, 
      (byte)0x00, (byte)0x0A, (byte)0x01, (byte)0x05, (byte)0xE9, (byte)0xEF, (byte)0x3D, (byte)0xFA, 
      (byte)0xF1, (byte)0x3C, (byte)0xEC, (byte)0xE3, (byte)0x4B, (byte)0x00, (byte)0x02, (byte)0x00, 
      (byte)0x04, (byte)0x0D, (byte)0x00, (byte)0x0F, (byte)0x0C, (byte)0x03, (byte)0xE6, (byte)0xD5, 
      (byte)0x2B, (byte)0x0D, (byte)0x02, (byte)0x00, (byte)0xF8, (byte)0xF0, (byte)0xFF, (byte)0xFC, 
      (byte)0xFC, (byte)0xFF, (byte)0xF9, (byte)0xF6, (byte)0xFF, (byte)0x0D, (byte)0x0C, (byte)0x00, 
      (byte)0xEF, (byte)0xEC, (byte)0x3F, (byte)0x05, (byte)0x00, (byte)0x19, (byte)0xF5, (byte)0xFE, 
      (byte)0xFF, (byte)0xF2, (byte)0xFE, (byte)0xEB, (byte)0xF6, (byte)0xFE, (byte)0xE9, (byte)0x0F, 
      (byte)0x08, (byte)0x0B, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0xFB, (byte)0xFA, (byte)0xFF, 
      (byte)0x01, (byte)0x04, (byte)0x04, (byte)0xF8, (byte)0xFF, (byte)0xFF, (byte)0x00, (byte)0x00, 
      (byte)0x0C, (byte)0xF8, (byte)0xE7, (byte)0x52, (byte)0x10, (byte)0x03, (byte)0x00, (byte)0xF8, 
      (byte)0xF4, (byte)0xE8, (byte)0x13, (byte)0x03, (byte)0x11, (byte)0xF6, (byte)0xE5, (byte)0xFE, 
      (byte)0x07, (byte)0x00, (byte)0x10, (byte)0x0C, (byte)0x01, (byte)0x00, (byte)0xFE, (byte)0xFB, 
      (byte)0xFF, (byte)0xFE, (byte)0xFF, (byte)0xE2, (byte)0xFE, (byte)0xFD, (byte)0xFF, (byte)0x06, 
      (byte)0x02, (byte)0x00, (byte)0xF7, (byte)0xEE, (byte)0x34, (byte)0x0A, (byte)0x01, (byte)0x00, 
      (byte)0xFD, (byte)0xFC, (byte)0xFF, (byte)0xFB, (byte)0xFC, (byte)0xEE, (byte)0xFE, (byte)0xFA, 
      (byte)0xFF, (byte)0x0D, (byte)0x01, (byte)0x00, (byte)0xF1, (byte)0xEF, (byte)0x56, (byte)0x0B, 
      (byte)0x01, (byte)0x00, (byte)0x10, (byte)0x03, (byte)0x00, (byte)0x0E, (byte)0x01, (byte)0x00, 
      (byte)0xEB, (byte)0xE5, (byte)0x53, (byte)0xF4, (byte)0xE4, (byte)0x37, (byte)0xF7, (byte)0xF5, 
      (byte)0x39, (byte)0x03, (byte)0x00, (byte)0x00, (byte)0x06, (byte)0x0D, (byte)0x00, (byte)0x0D, 
      (byte)0x01, (byte)0x00, (byte)0xDF, (byte)0xC6, (byte)0x27
  };

  // the 32-bit image data (with alpha)
  private byte[] expectedImageData32 = new byte[] {
      (byte)0xF1, (byte)0xFB, (byte)0x3D, (byte)0xFF, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0xFF, 
      (byte)0x06, (byte)0x02, (byte)0x00, (byte)0xFF, (byte)0x0A, (byte)0x01, (byte)0x05, (byte)0xFF, 
      (byte)0xE9, (byte)0xEF, (byte)0x3D, (byte)0xFF, (byte)0xFA, (byte)0xF1, (byte)0x3C, (byte)0xFF, 
      (byte)0xEC, (byte)0xE3, (byte)0x4B, (byte)0xFF, (byte)0x00, (byte)0x02, (byte)0x00, (byte)0xFF, 
      (byte)0x04, (byte)0x0D, (byte)0x00, (byte)0xFF, (byte)0x0F, (byte)0x0C, (byte)0x03, (byte)0xFF, 
      (byte)0xE6, (byte)0xD5, (byte)0x2B, (byte)0xFF, (byte)0x0D, (byte)0x02, (byte)0x00, (byte)0xFF, 
      (byte)0xF8, (byte)0xF0, (byte)0xFF, (byte)0xFF, (byte)0xFC, (byte)0xFC, (byte)0xFF, (byte)0xFF, 
      (byte)0xF9, (byte)0xF6, (byte)0xFF, (byte)0xFF, (byte)0x0D, (byte)0x0C, (byte)0x00, (byte)0xFF, 
      (byte)0xEF, (byte)0xEC, (byte)0x3F, (byte)0xFF, (byte)0x05, (byte)0x00, (byte)0x19, (byte)0xFF, 
      (byte)0xF5, (byte)0xFE, (byte)0xFF, (byte)0xFF, (byte)0xF2, (byte)0xFE, (byte)0xEB, (byte)0xFF, 
      (byte)0xF6, (byte)0xFE, (byte)0xE9, (byte)0xFF, (byte)0x0F, (byte)0x08, (byte)0x0B, (byte)0xFF, 
      (byte)0x08, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0xFB, (byte)0xFA, (byte)0xFF, (byte)0xFF, 
      (byte)0x01, (byte)0x04, (byte)0x04, (byte)0xFF, (byte)0xF8, (byte)0xFF, (byte)0xFF, (byte)0xFF, 
      (byte)0x00, (byte)0x00, (byte)0x0C, (byte)0xFF, (byte)0xF8, (byte)0xE7, (byte)0x52, (byte)0xFF, 
      (byte)0x10, (byte)0x03, (byte)0x00, (byte)0xFF, (byte)0xF8, (byte)0xF4, (byte)0xE8, (byte)0xFF, 
      (byte)0x13, (byte)0x03, (byte)0x11, (byte)0xFF, (byte)0xF6, (byte)0xE5, (byte)0xFE, (byte)0xFF, 
      (byte)0x07, (byte)0x00, (byte)0x10, (byte)0xFF, (byte)0x0C, (byte)0x01, (byte)0x00, (byte)0xFF, 
      (byte)0xFE, (byte)0xFB, (byte)0xFF, (byte)0xFF, (byte)0xFE, (byte)0xFF, (byte)0xE2, (byte)0xFF, 
      (byte)0xFE, (byte)0xFD, (byte)0xFF, (byte)0xFF, (byte)0x06, (byte)0x02, (byte)0x00, (byte)0xFF, 
      (byte)0xF7, (byte)0xEE, (byte)0x34, (byte)0xFF, (byte)0x0A, (byte)0x01, (byte)0x00, (byte)0xFF, 
      (byte)0xFD, (byte)0xFC, (byte)0xFF, (byte)0xFF, (byte)0xFB, (byte)0xFC, (byte)0xEE, (byte)0xFF, 
      (byte)0xFE, (byte)0xFA, (byte)0xFF, (byte)0xFF, (byte)0x0D, (byte)0x01, (byte)0x00, (byte)0xFF, 
      (byte)0xF1, (byte)0xEF, (byte)0x56, (byte)0xFF, (byte)0x0B, (byte)0x01, (byte)0x00, (byte)0xFF, 
      (byte)0x10, (byte)0x03, (byte)0x00, (byte)0xFF, (byte)0x0E, (byte)0x01, (byte)0x00, (byte)0xFF, 
      (byte)0xEB, (byte)0xE5, (byte)0x53, (byte)0xFF, (byte)0xF4, (byte)0xE4, (byte)0x37, (byte)0xFF, 
      (byte)0xF7, (byte)0xF5, (byte)0x39, (byte)0xFF, (byte)0x03, (byte)0x00, (byte)0x00, (byte)0xFF, 
      (byte)0x06, (byte)0x0D, (byte)0x00, (byte)0xFF, (byte)0x0D, (byte)0x01, (byte)0x00, (byte)0xFF, 
      (byte)0xDF, (byte)0xC6, (byte)0x27, (byte)0xFF
  };

  @Before
  public void before() {
    loader = new SimpleImageLoader();
  }

  @Test
  public void testLoadPNG() throws Exception {
    assertImage(24, expectedImageData24, loader.load("demo.png", SimpleImageLoaderTest.class.getResourceAsStream("/demo.png")));
  }

  @Test
  public void testLoadPNGForcedAlpha() throws Exception {
    assertImage(32, expectedImageData32, loader.load("demo.png", SimpleImageLoaderTest.class.getResourceAsStream("/demo.png"), new SimpleImageLoaderConfig().forceAlpha()));
  }

  @Test
  public void testLoadTGA() throws Exception {
    assertImage(24, expectedImageData24, loader.load("demo.tga", SimpleImageLoaderTest.class.getResourceAsStream("/demo.tga")));
  }

  @Test
  public void testLoadTGAForcedAlpha() throws Exception {
    assertImage(32, expectedImageData32, loader.load("demo.tga", SimpleImageLoaderTest.class.getResourceAsStream("/demo.tga"), new SimpleImageLoaderConfig().forceAlpha()));
  }

  private void assertImage(final int bpp, final byte[] expectedData, final ImageData image) {
    assertEquals(11, image.getWidth());
    assertEquals(5, image.getHeight());
    assertEquals(11, image.getOriginalWidth());
    assertEquals(5, image.getOriginalHeight());
    assertEquals(bpp, image.getBitsPerPixel());

    byte[] data = new byte[image.getData().limit()];
    image.getData().get(data);
    assertArrayEquals(expectedData, data);
  }
/*
  private void output(final ByteBuffer buffer) {
    for (int i=0; i<buffer.limit(); i++) {
      System.out.print("(byte)");
      System.out.print(String.format("0x%02X, ", buffer.get(i)));
      if ((i+1) % 8 == 0) {
        System.out.println();
      }
    }
  }
*/
}
